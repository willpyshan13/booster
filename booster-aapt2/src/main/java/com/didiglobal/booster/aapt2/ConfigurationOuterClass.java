// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Configuration.proto

package com.didiglobal.booster.aapt2;

public final class ConfigurationOuterClass {
  private ConfigurationOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface ConfigurationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aapt.pb.Configuration)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Mobile country code.
     * </pre>
     *
     * <code>uint32 mcc = 1;</code>
     */
    int getMcc();

    /**
     * <pre>
     * Mobile network code.
     * </pre>
     *
     * <code>uint32 mnc = 2;</code>
     */
    int getMnc();

    /**
     * <pre>
     * BCP-47 locale tag.
     * </pre>
     *
     * <code>string locale = 3;</code>
     */
    java.lang.String getLocale();
    /**
     * <pre>
     * BCP-47 locale tag.
     * </pre>
     *
     * <code>string locale = 3;</code>
     */
    com.google.protobuf.ByteString
        getLocaleBytes();

    /**
     * <pre>
     * Left-to-right, right-to-left...
     * </pre>
     *
     * <code>.aapt.pb.Configuration.LayoutDirection layout_direction = 4;</code>
     */
    int getLayoutDirectionValue();
    /**
     * <pre>
     * Left-to-right, right-to-left...
     * </pre>
     *
     * <code>.aapt.pb.Configuration.LayoutDirection layout_direction = 4;</code>
     */
    com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.LayoutDirection getLayoutDirection();

    /**
     * <pre>
     * Screen width in pixels. Prefer screen_width_dp.
     * </pre>
     *
     * <code>uint32 screen_width = 5;</code>
     */
    int getScreenWidth();

    /**
     * <pre>
     * Screen height in pixels. Prefer screen_height_dp.
     * </pre>
     *
     * <code>uint32 screen_height = 6;</code>
     */
    int getScreenHeight();

    /**
     * <pre>
     * Screen width in density independent pixels (dp).
     * </pre>
     *
     * <code>uint32 screen_width_dp = 7;</code>
     */
    int getScreenWidthDp();

    /**
     * <pre>
     * Screen height in density independent pixels (dp).
     * </pre>
     *
     * <code>uint32 screen_height_dp = 8;</code>
     */
    int getScreenHeightDp();

    /**
     * <pre>
     * The smallest screen dimension, regardless of orientation, in dp.
     * </pre>
     *
     * <code>uint32 smallest_screen_width_dp = 9;</code>
     */
    int getSmallestScreenWidthDp();

    /**
     * <pre>
     * Whether the device screen is classified as small, normal, large, xlarge.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenLayoutSize screen_layout_size = 10;</code>
     */
    int getScreenLayoutSizeValue();
    /**
     * <pre>
     * Whether the device screen is classified as small, normal, large, xlarge.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenLayoutSize screen_layout_size = 10;</code>
     */
    com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutSize getScreenLayoutSize();

    /**
     * <pre>
     * Whether the device screen is long.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenLayoutLong screen_layout_long = 11;</code>
     */
    int getScreenLayoutLongValue();
    /**
     * <pre>
     * Whether the device screen is long.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenLayoutLong screen_layout_long = 11;</code>
     */
    com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutLong getScreenLayoutLong();

    /**
     * <pre>
     * Whether the screen is round (Android Wear).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenRound screen_round = 12;</code>
     */
    int getScreenRoundValue();
    /**
     * <pre>
     * Whether the screen is round (Android Wear).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenRound screen_round = 12;</code>
     */
    com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenRound getScreenRound();

    /**
     * <pre>
     * Whether the screen supports wide color gamut.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.WideColorGamut wide_color_gamut = 13;</code>
     */
    int getWideColorGamutValue();
    /**
     * <pre>
     * Whether the screen supports wide color gamut.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.WideColorGamut wide_color_gamut = 13;</code>
     */
    com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.WideColorGamut getWideColorGamut();

    /**
     * <pre>
     * Whether the screen has high dynamic range.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Hdr hdr = 14;</code>
     */
    int getHdrValue();
    /**
     * <pre>
     * Whether the screen has high dynamic range.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Hdr hdr = 14;</code>
     */
    com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Hdr getHdr();

    /**
     * <pre>
     * Which orientation the device is in (portrait, landscape).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Orientation orientation = 15;</code>
     */
    int getOrientationValue();
    /**
     * <pre>
     * Which orientation the device is in (portrait, landscape).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Orientation orientation = 15;</code>
     */
    com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Orientation getOrientation();

    /**
     * <pre>
     * Which type of UI mode the device is in (television, car, etc.).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.UiModeType ui_mode_type = 16;</code>
     */
    int getUiModeTypeValue();
    /**
     * <pre>
     * Which type of UI mode the device is in (television, car, etc.).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.UiModeType ui_mode_type = 16;</code>
     */
    com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeType getUiModeType();

    /**
     * <pre>
     * Whether the device is in night mode.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.UiModeNight ui_mode_night = 17;</code>
     */
    int getUiModeNightValue();
    /**
     * <pre>
     * Whether the device is in night mode.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.UiModeNight ui_mode_night = 17;</code>
     */
    com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeNight getUiModeNight();

    /**
     * <pre>
     * The device's screen density in dots-per-inch (dpi).
     * </pre>
     *
     * <code>uint32 density = 18;</code>
     */
    int getDensity();

    /**
     * <pre>
     * Whether a touchscreen exists, supports a stylus, or finger.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Touchscreen touchscreen = 19;</code>
     */
    int getTouchscreenValue();
    /**
     * <pre>
     * Whether a touchscreen exists, supports a stylus, or finger.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Touchscreen touchscreen = 19;</code>
     */
    com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Touchscreen getTouchscreen();

    /**
     * <pre>
     * Whether the keyboard hardware keys are currently hidden, exposed, or
     * if the keyboard is a software keyboard.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.KeysHidden keys_hidden = 20;</code>
     */
    int getKeysHiddenValue();
    /**
     * <pre>
     * Whether the keyboard hardware keys are currently hidden, exposed, or
     * if the keyboard is a software keyboard.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.KeysHidden keys_hidden = 20;</code>
     */
    com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.KeysHidden getKeysHidden();

    /**
     * <pre>
     * The type of keyboard present (none, QWERTY, 12-key).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Keyboard keyboard = 21;</code>
     */
    int getKeyboardValue();
    /**
     * <pre>
     * The type of keyboard present (none, QWERTY, 12-key).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Keyboard keyboard = 21;</code>
     */
    com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Keyboard getKeyboard();

    /**
     * <pre>
     * Whether the navigation is exposed or hidden.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.NavHidden nav_hidden = 22;</code>
     */
    int getNavHiddenValue();
    /**
     * <pre>
     * Whether the navigation is exposed or hidden.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.NavHidden nav_hidden = 22;</code>
     */
    com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.NavHidden getNavHidden();

    /**
     * <pre>
     * The type of navigation present on the device
     * (trackball, wheel, dpad, etc.).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Navigation navigation = 23;</code>
     */
    int getNavigationValue();
    /**
     * <pre>
     * The type of navigation present on the device
     * (trackball, wheel, dpad, etc.).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Navigation navigation = 23;</code>
     */
    com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Navigation getNavigation();

    /**
     * <pre>
     * The minimum SDK version of the device.
     * </pre>
     *
     * <code>uint32 sdk_version = 24;</code>
     */
    int getSdkVersion();

    /**
     * <code>string product = 25;</code>
     */
    java.lang.String getProduct();
    /**
     * <code>string product = 25;</code>
     */
    com.google.protobuf.ByteString
        getProductBytes();
  }
  /**
   * <pre>
   * A description of the requirements a device must have in order for a
   * resource to be matched and selected.
   * </pre>
   *
   * Protobuf type {@code aapt.pb.Configuration}
   */
  public  static final class Configuration extends
      com.google.protobuf.GeneratedMessageLite<
          Configuration, Configuration.Builder> implements
      // @@protoc_insertion_point(message_implements:aapt.pb.Configuration)
      ConfigurationOrBuilder {
    private Configuration() {
      locale_ = "";
      product_ = "";
    }
    /**
     * Protobuf enum {@code aapt.pb.Configuration.LayoutDirection}
     */
    public enum LayoutDirection
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>LAYOUT_DIRECTION_UNSET = 0;</code>
       */
      LAYOUT_DIRECTION_UNSET(0),
      /**
       * <code>LAYOUT_DIRECTION_LTR = 1;</code>
       */
      LAYOUT_DIRECTION_LTR(1),
      /**
       * <code>LAYOUT_DIRECTION_RTL = 2;</code>
       */
      LAYOUT_DIRECTION_RTL(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>LAYOUT_DIRECTION_UNSET = 0;</code>
       */
      public static final int LAYOUT_DIRECTION_UNSET_VALUE = 0;
      /**
       * <code>LAYOUT_DIRECTION_LTR = 1;</code>
       */
      public static final int LAYOUT_DIRECTION_LTR_VALUE = 1;
      /**
       * <code>LAYOUT_DIRECTION_RTL = 2;</code>
       */
      public static final int LAYOUT_DIRECTION_RTL_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LayoutDirection valueOf(int value) {
        return forNumber(value);
      }

      public static LayoutDirection forNumber(int value) {
        switch (value) {
          case 0: return LAYOUT_DIRECTION_UNSET;
          case 1: return LAYOUT_DIRECTION_LTR;
          case 2: return LAYOUT_DIRECTION_RTL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LayoutDirection>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          LayoutDirection> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LayoutDirection>() {
              public LayoutDirection findValueByNumber(int number) {
                return LayoutDirection.forNumber(number);
              }
            };

      private final int value;

      private LayoutDirection(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:aapt.pb.Configuration.LayoutDirection)
    }

    /**
     * Protobuf enum {@code aapt.pb.Configuration.ScreenLayoutSize}
     */
    public enum ScreenLayoutSize
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>SCREEN_LAYOUT_SIZE_UNSET = 0;</code>
       */
      SCREEN_LAYOUT_SIZE_UNSET(0),
      /**
       * <code>SCREEN_LAYOUT_SIZE_SMALL = 1;</code>
       */
      SCREEN_LAYOUT_SIZE_SMALL(1),
      /**
       * <code>SCREEN_LAYOUT_SIZE_NORMAL = 2;</code>
       */
      SCREEN_LAYOUT_SIZE_NORMAL(2),
      /**
       * <code>SCREEN_LAYOUT_SIZE_LARGE = 3;</code>
       */
      SCREEN_LAYOUT_SIZE_LARGE(3),
      /**
       * <code>SCREEN_LAYOUT_SIZE_XLARGE = 4;</code>
       */
      SCREEN_LAYOUT_SIZE_XLARGE(4),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>SCREEN_LAYOUT_SIZE_UNSET = 0;</code>
       */
      public static final int SCREEN_LAYOUT_SIZE_UNSET_VALUE = 0;
      /**
       * <code>SCREEN_LAYOUT_SIZE_SMALL = 1;</code>
       */
      public static final int SCREEN_LAYOUT_SIZE_SMALL_VALUE = 1;
      /**
       * <code>SCREEN_LAYOUT_SIZE_NORMAL = 2;</code>
       */
      public static final int SCREEN_LAYOUT_SIZE_NORMAL_VALUE = 2;
      /**
       * <code>SCREEN_LAYOUT_SIZE_LARGE = 3;</code>
       */
      public static final int SCREEN_LAYOUT_SIZE_LARGE_VALUE = 3;
      /**
       * <code>SCREEN_LAYOUT_SIZE_XLARGE = 4;</code>
       */
      public static final int SCREEN_LAYOUT_SIZE_XLARGE_VALUE = 4;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ScreenLayoutSize valueOf(int value) {
        return forNumber(value);
      }

      public static ScreenLayoutSize forNumber(int value) {
        switch (value) {
          case 0: return SCREEN_LAYOUT_SIZE_UNSET;
          case 1: return SCREEN_LAYOUT_SIZE_SMALL;
          case 2: return SCREEN_LAYOUT_SIZE_NORMAL;
          case 3: return SCREEN_LAYOUT_SIZE_LARGE;
          case 4: return SCREEN_LAYOUT_SIZE_XLARGE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ScreenLayoutSize>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ScreenLayoutSize> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ScreenLayoutSize>() {
              public ScreenLayoutSize findValueByNumber(int number) {
                return ScreenLayoutSize.forNumber(number);
              }
            };

      private final int value;

      private ScreenLayoutSize(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:aapt.pb.Configuration.ScreenLayoutSize)
    }

    /**
     * Protobuf enum {@code aapt.pb.Configuration.ScreenLayoutLong}
     */
    public enum ScreenLayoutLong
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>SCREEN_LAYOUT_LONG_UNSET = 0;</code>
       */
      SCREEN_LAYOUT_LONG_UNSET(0),
      /**
       * <code>SCREEN_LAYOUT_LONG_LONG = 1;</code>
       */
      SCREEN_LAYOUT_LONG_LONG(1),
      /**
       * <code>SCREEN_LAYOUT_LONG_NOTLONG = 2;</code>
       */
      SCREEN_LAYOUT_LONG_NOTLONG(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>SCREEN_LAYOUT_LONG_UNSET = 0;</code>
       */
      public static final int SCREEN_LAYOUT_LONG_UNSET_VALUE = 0;
      /**
       * <code>SCREEN_LAYOUT_LONG_LONG = 1;</code>
       */
      public static final int SCREEN_LAYOUT_LONG_LONG_VALUE = 1;
      /**
       * <code>SCREEN_LAYOUT_LONG_NOTLONG = 2;</code>
       */
      public static final int SCREEN_LAYOUT_LONG_NOTLONG_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ScreenLayoutLong valueOf(int value) {
        return forNumber(value);
      }

      public static ScreenLayoutLong forNumber(int value) {
        switch (value) {
          case 0: return SCREEN_LAYOUT_LONG_UNSET;
          case 1: return SCREEN_LAYOUT_LONG_LONG;
          case 2: return SCREEN_LAYOUT_LONG_NOTLONG;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ScreenLayoutLong>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ScreenLayoutLong> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ScreenLayoutLong>() {
              public ScreenLayoutLong findValueByNumber(int number) {
                return ScreenLayoutLong.forNumber(number);
              }
            };

      private final int value;

      private ScreenLayoutLong(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:aapt.pb.Configuration.ScreenLayoutLong)
    }

    /**
     * Protobuf enum {@code aapt.pb.Configuration.ScreenRound}
     */
    public enum ScreenRound
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>SCREEN_ROUND_UNSET = 0;</code>
       */
      SCREEN_ROUND_UNSET(0),
      /**
       * <code>SCREEN_ROUND_ROUND = 1;</code>
       */
      SCREEN_ROUND_ROUND(1),
      /**
       * <code>SCREEN_ROUND_NOTROUND = 2;</code>
       */
      SCREEN_ROUND_NOTROUND(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>SCREEN_ROUND_UNSET = 0;</code>
       */
      public static final int SCREEN_ROUND_UNSET_VALUE = 0;
      /**
       * <code>SCREEN_ROUND_ROUND = 1;</code>
       */
      public static final int SCREEN_ROUND_ROUND_VALUE = 1;
      /**
       * <code>SCREEN_ROUND_NOTROUND = 2;</code>
       */
      public static final int SCREEN_ROUND_NOTROUND_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ScreenRound valueOf(int value) {
        return forNumber(value);
      }

      public static ScreenRound forNumber(int value) {
        switch (value) {
          case 0: return SCREEN_ROUND_UNSET;
          case 1: return SCREEN_ROUND_ROUND;
          case 2: return SCREEN_ROUND_NOTROUND;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ScreenRound>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ScreenRound> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ScreenRound>() {
              public ScreenRound findValueByNumber(int number) {
                return ScreenRound.forNumber(number);
              }
            };

      private final int value;

      private ScreenRound(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:aapt.pb.Configuration.ScreenRound)
    }

    /**
     * Protobuf enum {@code aapt.pb.Configuration.WideColorGamut}
     */
    public enum WideColorGamut
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>WIDE_COLOR_GAMUT_UNSET = 0;</code>
       */
      WIDE_COLOR_GAMUT_UNSET(0),
      /**
       * <code>WIDE_COLOR_GAMUT_WIDECG = 1;</code>
       */
      WIDE_COLOR_GAMUT_WIDECG(1),
      /**
       * <code>WIDE_COLOR_GAMUT_NOWIDECG = 2;</code>
       */
      WIDE_COLOR_GAMUT_NOWIDECG(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>WIDE_COLOR_GAMUT_UNSET = 0;</code>
       */
      public static final int WIDE_COLOR_GAMUT_UNSET_VALUE = 0;
      /**
       * <code>WIDE_COLOR_GAMUT_WIDECG = 1;</code>
       */
      public static final int WIDE_COLOR_GAMUT_WIDECG_VALUE = 1;
      /**
       * <code>WIDE_COLOR_GAMUT_NOWIDECG = 2;</code>
       */
      public static final int WIDE_COLOR_GAMUT_NOWIDECG_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static WideColorGamut valueOf(int value) {
        return forNumber(value);
      }

      public static WideColorGamut forNumber(int value) {
        switch (value) {
          case 0: return WIDE_COLOR_GAMUT_UNSET;
          case 1: return WIDE_COLOR_GAMUT_WIDECG;
          case 2: return WIDE_COLOR_GAMUT_NOWIDECG;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<WideColorGamut>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          WideColorGamut> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<WideColorGamut>() {
              public WideColorGamut findValueByNumber(int number) {
                return WideColorGamut.forNumber(number);
              }
            };

      private final int value;

      private WideColorGamut(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:aapt.pb.Configuration.WideColorGamut)
    }

    /**
     * Protobuf enum {@code aapt.pb.Configuration.Hdr}
     */
    public enum Hdr
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>HDR_UNSET = 0;</code>
       */
      HDR_UNSET(0),
      /**
       * <code>HDR_HIGHDR = 1;</code>
       */
      HDR_HIGHDR(1),
      /**
       * <code>HDR_LOWDR = 2;</code>
       */
      HDR_LOWDR(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>HDR_UNSET = 0;</code>
       */
      public static final int HDR_UNSET_VALUE = 0;
      /**
       * <code>HDR_HIGHDR = 1;</code>
       */
      public static final int HDR_HIGHDR_VALUE = 1;
      /**
       * <code>HDR_LOWDR = 2;</code>
       */
      public static final int HDR_LOWDR_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Hdr valueOf(int value) {
        return forNumber(value);
      }

      public static Hdr forNumber(int value) {
        switch (value) {
          case 0: return HDR_UNSET;
          case 1: return HDR_HIGHDR;
          case 2: return HDR_LOWDR;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Hdr>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Hdr> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Hdr>() {
              public Hdr findValueByNumber(int number) {
                return Hdr.forNumber(number);
              }
            };

      private final int value;

      private Hdr(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:aapt.pb.Configuration.Hdr)
    }

    /**
     * Protobuf enum {@code aapt.pb.Configuration.Orientation}
     */
    public enum Orientation
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>ORIENTATION_UNSET = 0;</code>
       */
      ORIENTATION_UNSET(0),
      /**
       * <code>ORIENTATION_PORT = 1;</code>
       */
      ORIENTATION_PORT(1),
      /**
       * <code>ORIENTATION_LAND = 2;</code>
       */
      ORIENTATION_LAND(2),
      /**
       * <code>ORIENTATION_SQUARE = 3;</code>
       */
      ORIENTATION_SQUARE(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>ORIENTATION_UNSET = 0;</code>
       */
      public static final int ORIENTATION_UNSET_VALUE = 0;
      /**
       * <code>ORIENTATION_PORT = 1;</code>
       */
      public static final int ORIENTATION_PORT_VALUE = 1;
      /**
       * <code>ORIENTATION_LAND = 2;</code>
       */
      public static final int ORIENTATION_LAND_VALUE = 2;
      /**
       * <code>ORIENTATION_SQUARE = 3;</code>
       */
      public static final int ORIENTATION_SQUARE_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Orientation valueOf(int value) {
        return forNumber(value);
      }

      public static Orientation forNumber(int value) {
        switch (value) {
          case 0: return ORIENTATION_UNSET;
          case 1: return ORIENTATION_PORT;
          case 2: return ORIENTATION_LAND;
          case 3: return ORIENTATION_SQUARE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Orientation>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Orientation> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Orientation>() {
              public Orientation findValueByNumber(int number) {
                return Orientation.forNumber(number);
              }
            };

      private final int value;

      private Orientation(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:aapt.pb.Configuration.Orientation)
    }

    /**
     * Protobuf enum {@code aapt.pb.Configuration.UiModeType}
     */
    public enum UiModeType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UI_MODE_TYPE_UNSET = 0;</code>
       */
      UI_MODE_TYPE_UNSET(0),
      /**
       * <code>UI_MODE_TYPE_NORMAL = 1;</code>
       */
      UI_MODE_TYPE_NORMAL(1),
      /**
       * <code>UI_MODE_TYPE_DESK = 2;</code>
       */
      UI_MODE_TYPE_DESK(2),
      /**
       * <code>UI_MODE_TYPE_CAR = 3;</code>
       */
      UI_MODE_TYPE_CAR(3),
      /**
       * <code>UI_MODE_TYPE_TELEVISION = 4;</code>
       */
      UI_MODE_TYPE_TELEVISION(4),
      /**
       * <code>UI_MODE_TYPE_APPLIANCE = 5;</code>
       */
      UI_MODE_TYPE_APPLIANCE(5),
      /**
       * <code>UI_MODE_TYPE_WATCH = 6;</code>
       */
      UI_MODE_TYPE_WATCH(6),
      /**
       * <code>UI_MODE_TYPE_VRHEADSET = 7;</code>
       */
      UI_MODE_TYPE_VRHEADSET(7),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>UI_MODE_TYPE_UNSET = 0;</code>
       */
      public static final int UI_MODE_TYPE_UNSET_VALUE = 0;
      /**
       * <code>UI_MODE_TYPE_NORMAL = 1;</code>
       */
      public static final int UI_MODE_TYPE_NORMAL_VALUE = 1;
      /**
       * <code>UI_MODE_TYPE_DESK = 2;</code>
       */
      public static final int UI_MODE_TYPE_DESK_VALUE = 2;
      /**
       * <code>UI_MODE_TYPE_CAR = 3;</code>
       */
      public static final int UI_MODE_TYPE_CAR_VALUE = 3;
      /**
       * <code>UI_MODE_TYPE_TELEVISION = 4;</code>
       */
      public static final int UI_MODE_TYPE_TELEVISION_VALUE = 4;
      /**
       * <code>UI_MODE_TYPE_APPLIANCE = 5;</code>
       */
      public static final int UI_MODE_TYPE_APPLIANCE_VALUE = 5;
      /**
       * <code>UI_MODE_TYPE_WATCH = 6;</code>
       */
      public static final int UI_MODE_TYPE_WATCH_VALUE = 6;
      /**
       * <code>UI_MODE_TYPE_VRHEADSET = 7;</code>
       */
      public static final int UI_MODE_TYPE_VRHEADSET_VALUE = 7;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static UiModeType valueOf(int value) {
        return forNumber(value);
      }

      public static UiModeType forNumber(int value) {
        switch (value) {
          case 0: return UI_MODE_TYPE_UNSET;
          case 1: return UI_MODE_TYPE_NORMAL;
          case 2: return UI_MODE_TYPE_DESK;
          case 3: return UI_MODE_TYPE_CAR;
          case 4: return UI_MODE_TYPE_TELEVISION;
          case 5: return UI_MODE_TYPE_APPLIANCE;
          case 6: return UI_MODE_TYPE_WATCH;
          case 7: return UI_MODE_TYPE_VRHEADSET;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<UiModeType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          UiModeType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<UiModeType>() {
              public UiModeType findValueByNumber(int number) {
                return UiModeType.forNumber(number);
              }
            };

      private final int value;

      private UiModeType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:aapt.pb.Configuration.UiModeType)
    }

    /**
     * Protobuf enum {@code aapt.pb.Configuration.UiModeNight}
     */
    public enum UiModeNight
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UI_MODE_NIGHT_UNSET = 0;</code>
       */
      UI_MODE_NIGHT_UNSET(0),
      /**
       * <code>UI_MODE_NIGHT_NIGHT = 1;</code>
       */
      UI_MODE_NIGHT_NIGHT(1),
      /**
       * <code>UI_MODE_NIGHT_NOTNIGHT = 2;</code>
       */
      UI_MODE_NIGHT_NOTNIGHT(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>UI_MODE_NIGHT_UNSET = 0;</code>
       */
      public static final int UI_MODE_NIGHT_UNSET_VALUE = 0;
      /**
       * <code>UI_MODE_NIGHT_NIGHT = 1;</code>
       */
      public static final int UI_MODE_NIGHT_NIGHT_VALUE = 1;
      /**
       * <code>UI_MODE_NIGHT_NOTNIGHT = 2;</code>
       */
      public static final int UI_MODE_NIGHT_NOTNIGHT_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static UiModeNight valueOf(int value) {
        return forNumber(value);
      }

      public static UiModeNight forNumber(int value) {
        switch (value) {
          case 0: return UI_MODE_NIGHT_UNSET;
          case 1: return UI_MODE_NIGHT_NIGHT;
          case 2: return UI_MODE_NIGHT_NOTNIGHT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<UiModeNight>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          UiModeNight> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<UiModeNight>() {
              public UiModeNight findValueByNumber(int number) {
                return UiModeNight.forNumber(number);
              }
            };

      private final int value;

      private UiModeNight(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:aapt.pb.Configuration.UiModeNight)
    }

    /**
     * Protobuf enum {@code aapt.pb.Configuration.Touchscreen}
     */
    public enum Touchscreen
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>TOUCHSCREEN_UNSET = 0;</code>
       */
      TOUCHSCREEN_UNSET(0),
      /**
       * <code>TOUCHSCREEN_NOTOUCH = 1;</code>
       */
      TOUCHSCREEN_NOTOUCH(1),
      /**
       * <code>TOUCHSCREEN_STYLUS = 2;</code>
       */
      TOUCHSCREEN_STYLUS(2),
      /**
       * <code>TOUCHSCREEN_FINGER = 3;</code>
       */
      TOUCHSCREEN_FINGER(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>TOUCHSCREEN_UNSET = 0;</code>
       */
      public static final int TOUCHSCREEN_UNSET_VALUE = 0;
      /**
       * <code>TOUCHSCREEN_NOTOUCH = 1;</code>
       */
      public static final int TOUCHSCREEN_NOTOUCH_VALUE = 1;
      /**
       * <code>TOUCHSCREEN_STYLUS = 2;</code>
       */
      public static final int TOUCHSCREEN_STYLUS_VALUE = 2;
      /**
       * <code>TOUCHSCREEN_FINGER = 3;</code>
       */
      public static final int TOUCHSCREEN_FINGER_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Touchscreen valueOf(int value) {
        return forNumber(value);
      }

      public static Touchscreen forNumber(int value) {
        switch (value) {
          case 0: return TOUCHSCREEN_UNSET;
          case 1: return TOUCHSCREEN_NOTOUCH;
          case 2: return TOUCHSCREEN_STYLUS;
          case 3: return TOUCHSCREEN_FINGER;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Touchscreen>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Touchscreen> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Touchscreen>() {
              public Touchscreen findValueByNumber(int number) {
                return Touchscreen.forNumber(number);
              }
            };

      private final int value;

      private Touchscreen(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:aapt.pb.Configuration.Touchscreen)
    }

    /**
     * Protobuf enum {@code aapt.pb.Configuration.KeysHidden}
     */
    public enum KeysHidden
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>KEYS_HIDDEN_UNSET = 0;</code>
       */
      KEYS_HIDDEN_UNSET(0),
      /**
       * <code>KEYS_HIDDEN_KEYSEXPOSED = 1;</code>
       */
      KEYS_HIDDEN_KEYSEXPOSED(1),
      /**
       * <code>KEYS_HIDDEN_KEYSHIDDEN = 2;</code>
       */
      KEYS_HIDDEN_KEYSHIDDEN(2),
      /**
       * <code>KEYS_HIDDEN_KEYSSOFT = 3;</code>
       */
      KEYS_HIDDEN_KEYSSOFT(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>KEYS_HIDDEN_UNSET = 0;</code>
       */
      public static final int KEYS_HIDDEN_UNSET_VALUE = 0;
      /**
       * <code>KEYS_HIDDEN_KEYSEXPOSED = 1;</code>
       */
      public static final int KEYS_HIDDEN_KEYSEXPOSED_VALUE = 1;
      /**
       * <code>KEYS_HIDDEN_KEYSHIDDEN = 2;</code>
       */
      public static final int KEYS_HIDDEN_KEYSHIDDEN_VALUE = 2;
      /**
       * <code>KEYS_HIDDEN_KEYSSOFT = 3;</code>
       */
      public static final int KEYS_HIDDEN_KEYSSOFT_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static KeysHidden valueOf(int value) {
        return forNumber(value);
      }

      public static KeysHidden forNumber(int value) {
        switch (value) {
          case 0: return KEYS_HIDDEN_UNSET;
          case 1: return KEYS_HIDDEN_KEYSEXPOSED;
          case 2: return KEYS_HIDDEN_KEYSHIDDEN;
          case 3: return KEYS_HIDDEN_KEYSSOFT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<KeysHidden>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          KeysHidden> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<KeysHidden>() {
              public KeysHidden findValueByNumber(int number) {
                return KeysHidden.forNumber(number);
              }
            };

      private final int value;

      private KeysHidden(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:aapt.pb.Configuration.KeysHidden)
    }

    /**
     * Protobuf enum {@code aapt.pb.Configuration.Keyboard}
     */
    public enum Keyboard
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>KEYBOARD_UNSET = 0;</code>
       */
      KEYBOARD_UNSET(0),
      /**
       * <code>KEYBOARD_NOKEYS = 1;</code>
       */
      KEYBOARD_NOKEYS(1),
      /**
       * <code>KEYBOARD_QWERTY = 2;</code>
       */
      KEYBOARD_QWERTY(2),
      /**
       * <code>KEYBOARD_TWELVEKEY = 3;</code>
       */
      KEYBOARD_TWELVEKEY(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>KEYBOARD_UNSET = 0;</code>
       */
      public static final int KEYBOARD_UNSET_VALUE = 0;
      /**
       * <code>KEYBOARD_NOKEYS = 1;</code>
       */
      public static final int KEYBOARD_NOKEYS_VALUE = 1;
      /**
       * <code>KEYBOARD_QWERTY = 2;</code>
       */
      public static final int KEYBOARD_QWERTY_VALUE = 2;
      /**
       * <code>KEYBOARD_TWELVEKEY = 3;</code>
       */
      public static final int KEYBOARD_TWELVEKEY_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Keyboard valueOf(int value) {
        return forNumber(value);
      }

      public static Keyboard forNumber(int value) {
        switch (value) {
          case 0: return KEYBOARD_UNSET;
          case 1: return KEYBOARD_NOKEYS;
          case 2: return KEYBOARD_QWERTY;
          case 3: return KEYBOARD_TWELVEKEY;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Keyboard>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Keyboard> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Keyboard>() {
              public Keyboard findValueByNumber(int number) {
                return Keyboard.forNumber(number);
              }
            };

      private final int value;

      private Keyboard(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:aapt.pb.Configuration.Keyboard)
    }

    /**
     * Protobuf enum {@code aapt.pb.Configuration.NavHidden}
     */
    public enum NavHidden
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>NAV_HIDDEN_UNSET = 0;</code>
       */
      NAV_HIDDEN_UNSET(0),
      /**
       * <code>NAV_HIDDEN_NAVEXPOSED = 1;</code>
       */
      NAV_HIDDEN_NAVEXPOSED(1),
      /**
       * <code>NAV_HIDDEN_NAVHIDDEN = 2;</code>
       */
      NAV_HIDDEN_NAVHIDDEN(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>NAV_HIDDEN_UNSET = 0;</code>
       */
      public static final int NAV_HIDDEN_UNSET_VALUE = 0;
      /**
       * <code>NAV_HIDDEN_NAVEXPOSED = 1;</code>
       */
      public static final int NAV_HIDDEN_NAVEXPOSED_VALUE = 1;
      /**
       * <code>NAV_HIDDEN_NAVHIDDEN = 2;</code>
       */
      public static final int NAV_HIDDEN_NAVHIDDEN_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static NavHidden valueOf(int value) {
        return forNumber(value);
      }

      public static NavHidden forNumber(int value) {
        switch (value) {
          case 0: return NAV_HIDDEN_UNSET;
          case 1: return NAV_HIDDEN_NAVEXPOSED;
          case 2: return NAV_HIDDEN_NAVHIDDEN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<NavHidden>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          NavHidden> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<NavHidden>() {
              public NavHidden findValueByNumber(int number) {
                return NavHidden.forNumber(number);
              }
            };

      private final int value;

      private NavHidden(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:aapt.pb.Configuration.NavHidden)
    }

    /**
     * Protobuf enum {@code aapt.pb.Configuration.Navigation}
     */
    public enum Navigation
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>NAVIGATION_UNSET = 0;</code>
       */
      NAVIGATION_UNSET(0),
      /**
       * <code>NAVIGATION_NONAV = 1;</code>
       */
      NAVIGATION_NONAV(1),
      /**
       * <code>NAVIGATION_DPAD = 2;</code>
       */
      NAVIGATION_DPAD(2),
      /**
       * <code>NAVIGATION_TRACKBALL = 3;</code>
       */
      NAVIGATION_TRACKBALL(3),
      /**
       * <code>NAVIGATION_WHEEL = 4;</code>
       */
      NAVIGATION_WHEEL(4),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>NAVIGATION_UNSET = 0;</code>
       */
      public static final int NAVIGATION_UNSET_VALUE = 0;
      /**
       * <code>NAVIGATION_NONAV = 1;</code>
       */
      public static final int NAVIGATION_NONAV_VALUE = 1;
      /**
       * <code>NAVIGATION_DPAD = 2;</code>
       */
      public static final int NAVIGATION_DPAD_VALUE = 2;
      /**
       * <code>NAVIGATION_TRACKBALL = 3;</code>
       */
      public static final int NAVIGATION_TRACKBALL_VALUE = 3;
      /**
       * <code>NAVIGATION_WHEEL = 4;</code>
       */
      public static final int NAVIGATION_WHEEL_VALUE = 4;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Navigation valueOf(int value) {
        return forNumber(value);
      }

      public static Navigation forNumber(int value) {
        switch (value) {
          case 0: return NAVIGATION_UNSET;
          case 1: return NAVIGATION_NONAV;
          case 2: return NAVIGATION_DPAD;
          case 3: return NAVIGATION_TRACKBALL;
          case 4: return NAVIGATION_WHEEL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Navigation>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Navigation> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Navigation>() {
              public Navigation findValueByNumber(int number) {
                return Navigation.forNumber(number);
              }
            };

      private final int value;

      private Navigation(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:aapt.pb.Configuration.Navigation)
    }

    public static final int MCC_FIELD_NUMBER = 1;
    private int mcc_;
    /**
     * <pre>
     * Mobile country code.
     * </pre>
     *
     * <code>uint32 mcc = 1;</code>
     */
    public int getMcc() {
      return mcc_;
    }
    /**
     * <pre>
     * Mobile country code.
     * </pre>
     *
     * <code>uint32 mcc = 1;</code>
     */
    private void setMcc(int value) {
      
      mcc_ = value;
    }
    /**
     * <pre>
     * Mobile country code.
     * </pre>
     *
     * <code>uint32 mcc = 1;</code>
     */
    private void clearMcc() {
      
      mcc_ = 0;
    }

    public static final int MNC_FIELD_NUMBER = 2;
    private int mnc_;
    /**
     * <pre>
     * Mobile network code.
     * </pre>
     *
     * <code>uint32 mnc = 2;</code>
     */
    public int getMnc() {
      return mnc_;
    }
    /**
     * <pre>
     * Mobile network code.
     * </pre>
     *
     * <code>uint32 mnc = 2;</code>
     */
    private void setMnc(int value) {
      
      mnc_ = value;
    }
    /**
     * <pre>
     * Mobile network code.
     * </pre>
     *
     * <code>uint32 mnc = 2;</code>
     */
    private void clearMnc() {
      
      mnc_ = 0;
    }

    public static final int LOCALE_FIELD_NUMBER = 3;
    private java.lang.String locale_;
    /**
     * <pre>
     * BCP-47 locale tag.
     * </pre>
     *
     * <code>string locale = 3;</code>
     */
    public java.lang.String getLocale() {
      return locale_;
    }
    /**
     * <pre>
     * BCP-47 locale tag.
     * </pre>
     *
     * <code>string locale = 3;</code>
     */
    public com.google.protobuf.ByteString
        getLocaleBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(locale_);
    }
    /**
     * <pre>
     * BCP-47 locale tag.
     * </pre>
     *
     * <code>string locale = 3;</code>
     */
    private void setLocale(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      locale_ = value;
    }
    /**
     * <pre>
     * BCP-47 locale tag.
     * </pre>
     *
     * <code>string locale = 3;</code>
     */
    private void clearLocale() {
      
      locale_ = getDefaultInstance().getLocale();
    }
    /**
     * <pre>
     * BCP-47 locale tag.
     * </pre>
     *
     * <code>string locale = 3;</code>
     */
    private void setLocaleBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      locale_ = value.toStringUtf8();
    }

    public static final int LAYOUT_DIRECTION_FIELD_NUMBER = 4;
    private int layoutDirection_;
    /**
     * <pre>
     * Left-to-right, right-to-left...
     * </pre>
     *
     * <code>.aapt.pb.Configuration.LayoutDirection layout_direction = 4;</code>
     */
    public int getLayoutDirectionValue() {
      return layoutDirection_;
    }
    /**
     * <pre>
     * Left-to-right, right-to-left...
     * </pre>
     *
     * <code>.aapt.pb.Configuration.LayoutDirection layout_direction = 4;</code>
     */
    public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.LayoutDirection getLayoutDirection() {
      com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.LayoutDirection result = com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.LayoutDirection.forNumber(layoutDirection_);
      return result == null ? com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.LayoutDirection.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Left-to-right, right-to-left...
     * </pre>
     *
     * <code>.aapt.pb.Configuration.LayoutDirection layout_direction = 4;</code>
     */
    private void setLayoutDirectionValue(int value) {
        layoutDirection_ = value;
    }
    /**
     * <pre>
     * Left-to-right, right-to-left...
     * </pre>
     *
     * <code>.aapt.pb.Configuration.LayoutDirection layout_direction = 4;</code>
     */
    private void setLayoutDirection(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.LayoutDirection value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      layoutDirection_ = value.getNumber();
    }
    /**
     * <pre>
     * Left-to-right, right-to-left...
     * </pre>
     *
     * <code>.aapt.pb.Configuration.LayoutDirection layout_direction = 4;</code>
     */
    private void clearLayoutDirection() {
      
      layoutDirection_ = 0;
    }

    public static final int SCREEN_WIDTH_FIELD_NUMBER = 5;
    private int screenWidth_;
    /**
     * <pre>
     * Screen width in pixels. Prefer screen_width_dp.
     * </pre>
     *
     * <code>uint32 screen_width = 5;</code>
     */
    public int getScreenWidth() {
      return screenWidth_;
    }
    /**
     * <pre>
     * Screen width in pixels. Prefer screen_width_dp.
     * </pre>
     *
     * <code>uint32 screen_width = 5;</code>
     */
    private void setScreenWidth(int value) {
      
      screenWidth_ = value;
    }
    /**
     * <pre>
     * Screen width in pixels. Prefer screen_width_dp.
     * </pre>
     *
     * <code>uint32 screen_width = 5;</code>
     */
    private void clearScreenWidth() {
      
      screenWidth_ = 0;
    }

    public static final int SCREEN_HEIGHT_FIELD_NUMBER = 6;
    private int screenHeight_;
    /**
     * <pre>
     * Screen height in pixels. Prefer screen_height_dp.
     * </pre>
     *
     * <code>uint32 screen_height = 6;</code>
     */
    public int getScreenHeight() {
      return screenHeight_;
    }
    /**
     * <pre>
     * Screen height in pixels. Prefer screen_height_dp.
     * </pre>
     *
     * <code>uint32 screen_height = 6;</code>
     */
    private void setScreenHeight(int value) {
      
      screenHeight_ = value;
    }
    /**
     * <pre>
     * Screen height in pixels. Prefer screen_height_dp.
     * </pre>
     *
     * <code>uint32 screen_height = 6;</code>
     */
    private void clearScreenHeight() {
      
      screenHeight_ = 0;
    }

    public static final int SCREEN_WIDTH_DP_FIELD_NUMBER = 7;
    private int screenWidthDp_;
    /**
     * <pre>
     * Screen width in density independent pixels (dp).
     * </pre>
     *
     * <code>uint32 screen_width_dp = 7;</code>
     */
    public int getScreenWidthDp() {
      return screenWidthDp_;
    }
    /**
     * <pre>
     * Screen width in density independent pixels (dp).
     * </pre>
     *
     * <code>uint32 screen_width_dp = 7;</code>
     */
    private void setScreenWidthDp(int value) {
      
      screenWidthDp_ = value;
    }
    /**
     * <pre>
     * Screen width in density independent pixels (dp).
     * </pre>
     *
     * <code>uint32 screen_width_dp = 7;</code>
     */
    private void clearScreenWidthDp() {
      
      screenWidthDp_ = 0;
    }

    public static final int SCREEN_HEIGHT_DP_FIELD_NUMBER = 8;
    private int screenHeightDp_;
    /**
     * <pre>
     * Screen height in density independent pixels (dp).
     * </pre>
     *
     * <code>uint32 screen_height_dp = 8;</code>
     */
    public int getScreenHeightDp() {
      return screenHeightDp_;
    }
    /**
     * <pre>
     * Screen height in density independent pixels (dp).
     * </pre>
     *
     * <code>uint32 screen_height_dp = 8;</code>
     */
    private void setScreenHeightDp(int value) {
      
      screenHeightDp_ = value;
    }
    /**
     * <pre>
     * Screen height in density independent pixels (dp).
     * </pre>
     *
     * <code>uint32 screen_height_dp = 8;</code>
     */
    private void clearScreenHeightDp() {
      
      screenHeightDp_ = 0;
    }

    public static final int SMALLEST_SCREEN_WIDTH_DP_FIELD_NUMBER = 9;
    private int smallestScreenWidthDp_;
    /**
     * <pre>
     * The smallest screen dimension, regardless of orientation, in dp.
     * </pre>
     *
     * <code>uint32 smallest_screen_width_dp = 9;</code>
     */
    public int getSmallestScreenWidthDp() {
      return smallestScreenWidthDp_;
    }
    /**
     * <pre>
     * The smallest screen dimension, regardless of orientation, in dp.
     * </pre>
     *
     * <code>uint32 smallest_screen_width_dp = 9;</code>
     */
    private void setSmallestScreenWidthDp(int value) {
      
      smallestScreenWidthDp_ = value;
    }
    /**
     * <pre>
     * The smallest screen dimension, regardless of orientation, in dp.
     * </pre>
     *
     * <code>uint32 smallest_screen_width_dp = 9;</code>
     */
    private void clearSmallestScreenWidthDp() {
      
      smallestScreenWidthDp_ = 0;
    }

    public static final int SCREEN_LAYOUT_SIZE_FIELD_NUMBER = 10;
    private int screenLayoutSize_;
    /**
     * <pre>
     * Whether the device screen is classified as small, normal, large, xlarge.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenLayoutSize screen_layout_size = 10;</code>
     */
    public int getScreenLayoutSizeValue() {
      return screenLayoutSize_;
    }
    /**
     * <pre>
     * Whether the device screen is classified as small, normal, large, xlarge.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenLayoutSize screen_layout_size = 10;</code>
     */
    public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutSize getScreenLayoutSize() {
      com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutSize result = com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutSize.forNumber(screenLayoutSize_);
      return result == null ? com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutSize.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Whether the device screen is classified as small, normal, large, xlarge.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenLayoutSize screen_layout_size = 10;</code>
     */
    private void setScreenLayoutSizeValue(int value) {
        screenLayoutSize_ = value;
    }
    /**
     * <pre>
     * Whether the device screen is classified as small, normal, large, xlarge.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenLayoutSize screen_layout_size = 10;</code>
     */
    private void setScreenLayoutSize(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutSize value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      screenLayoutSize_ = value.getNumber();
    }
    /**
     * <pre>
     * Whether the device screen is classified as small, normal, large, xlarge.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenLayoutSize screen_layout_size = 10;</code>
     */
    private void clearScreenLayoutSize() {
      
      screenLayoutSize_ = 0;
    }

    public static final int SCREEN_LAYOUT_LONG_FIELD_NUMBER = 11;
    private int screenLayoutLong_;
    /**
     * <pre>
     * Whether the device screen is long.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenLayoutLong screen_layout_long = 11;</code>
     */
    public int getScreenLayoutLongValue() {
      return screenLayoutLong_;
    }
    /**
     * <pre>
     * Whether the device screen is long.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenLayoutLong screen_layout_long = 11;</code>
     */
    public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutLong getScreenLayoutLong() {
      com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutLong result = com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutLong.forNumber(screenLayoutLong_);
      return result == null ? com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutLong.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Whether the device screen is long.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenLayoutLong screen_layout_long = 11;</code>
     */
    private void setScreenLayoutLongValue(int value) {
        screenLayoutLong_ = value;
    }
    /**
     * <pre>
     * Whether the device screen is long.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenLayoutLong screen_layout_long = 11;</code>
     */
    private void setScreenLayoutLong(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutLong value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      screenLayoutLong_ = value.getNumber();
    }
    /**
     * <pre>
     * Whether the device screen is long.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenLayoutLong screen_layout_long = 11;</code>
     */
    private void clearScreenLayoutLong() {
      
      screenLayoutLong_ = 0;
    }

    public static final int SCREEN_ROUND_FIELD_NUMBER = 12;
    private int screenRound_;
    /**
     * <pre>
     * Whether the screen is round (Android Wear).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenRound screen_round = 12;</code>
     */
    public int getScreenRoundValue() {
      return screenRound_;
    }
    /**
     * <pre>
     * Whether the screen is round (Android Wear).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenRound screen_round = 12;</code>
     */
    public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenRound getScreenRound() {
      com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenRound result = com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenRound.forNumber(screenRound_);
      return result == null ? com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenRound.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Whether the screen is round (Android Wear).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenRound screen_round = 12;</code>
     */
    private void setScreenRoundValue(int value) {
        screenRound_ = value;
    }
    /**
     * <pre>
     * Whether the screen is round (Android Wear).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenRound screen_round = 12;</code>
     */
    private void setScreenRound(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenRound value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      screenRound_ = value.getNumber();
    }
    /**
     * <pre>
     * Whether the screen is round (Android Wear).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.ScreenRound screen_round = 12;</code>
     */
    private void clearScreenRound() {
      
      screenRound_ = 0;
    }

    public static final int WIDE_COLOR_GAMUT_FIELD_NUMBER = 13;
    private int wideColorGamut_;
    /**
     * <pre>
     * Whether the screen supports wide color gamut.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.WideColorGamut wide_color_gamut = 13;</code>
     */
    public int getWideColorGamutValue() {
      return wideColorGamut_;
    }
    /**
     * <pre>
     * Whether the screen supports wide color gamut.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.WideColorGamut wide_color_gamut = 13;</code>
     */
    public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.WideColorGamut getWideColorGamut() {
      com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.WideColorGamut result = com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.WideColorGamut.forNumber(wideColorGamut_);
      return result == null ? com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.WideColorGamut.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Whether the screen supports wide color gamut.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.WideColorGamut wide_color_gamut = 13;</code>
     */
    private void setWideColorGamutValue(int value) {
        wideColorGamut_ = value;
    }
    /**
     * <pre>
     * Whether the screen supports wide color gamut.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.WideColorGamut wide_color_gamut = 13;</code>
     */
    private void setWideColorGamut(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.WideColorGamut value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      wideColorGamut_ = value.getNumber();
    }
    /**
     * <pre>
     * Whether the screen supports wide color gamut.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.WideColorGamut wide_color_gamut = 13;</code>
     */
    private void clearWideColorGamut() {
      
      wideColorGamut_ = 0;
    }

    public static final int HDR_FIELD_NUMBER = 14;
    private int hdr_;
    /**
     * <pre>
     * Whether the screen has high dynamic range.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Hdr hdr = 14;</code>
     */
    public int getHdrValue() {
      return hdr_;
    }
    /**
     * <pre>
     * Whether the screen has high dynamic range.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Hdr hdr = 14;</code>
     */
    public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Hdr getHdr() {
      com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Hdr result = com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Hdr.forNumber(hdr_);
      return result == null ? com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Hdr.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Whether the screen has high dynamic range.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Hdr hdr = 14;</code>
     */
    private void setHdrValue(int value) {
        hdr_ = value;
    }
    /**
     * <pre>
     * Whether the screen has high dynamic range.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Hdr hdr = 14;</code>
     */
    private void setHdr(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Hdr value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      hdr_ = value.getNumber();
    }
    /**
     * <pre>
     * Whether the screen has high dynamic range.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Hdr hdr = 14;</code>
     */
    private void clearHdr() {
      
      hdr_ = 0;
    }

    public static final int ORIENTATION_FIELD_NUMBER = 15;
    private int orientation_;
    /**
     * <pre>
     * Which orientation the device is in (portrait, landscape).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Orientation orientation = 15;</code>
     */
    public int getOrientationValue() {
      return orientation_;
    }
    /**
     * <pre>
     * Which orientation the device is in (portrait, landscape).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Orientation orientation = 15;</code>
     */
    public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Orientation getOrientation() {
      com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Orientation result = com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Orientation.forNumber(orientation_);
      return result == null ? com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Orientation.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Which orientation the device is in (portrait, landscape).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Orientation orientation = 15;</code>
     */
    private void setOrientationValue(int value) {
        orientation_ = value;
    }
    /**
     * <pre>
     * Which orientation the device is in (portrait, landscape).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Orientation orientation = 15;</code>
     */
    private void setOrientation(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Orientation value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      orientation_ = value.getNumber();
    }
    /**
     * <pre>
     * Which orientation the device is in (portrait, landscape).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Orientation orientation = 15;</code>
     */
    private void clearOrientation() {
      
      orientation_ = 0;
    }

    public static final int UI_MODE_TYPE_FIELD_NUMBER = 16;
    private int uiModeType_;
    /**
     * <pre>
     * Which type of UI mode the device is in (television, car, etc.).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.UiModeType ui_mode_type = 16;</code>
     */
    public int getUiModeTypeValue() {
      return uiModeType_;
    }
    /**
     * <pre>
     * Which type of UI mode the device is in (television, car, etc.).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.UiModeType ui_mode_type = 16;</code>
     */
    public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeType getUiModeType() {
      com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeType result = com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeType.forNumber(uiModeType_);
      return result == null ? com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Which type of UI mode the device is in (television, car, etc.).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.UiModeType ui_mode_type = 16;</code>
     */
    private void setUiModeTypeValue(int value) {
        uiModeType_ = value;
    }
    /**
     * <pre>
     * Which type of UI mode the device is in (television, car, etc.).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.UiModeType ui_mode_type = 16;</code>
     */
    private void setUiModeType(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      uiModeType_ = value.getNumber();
    }
    /**
     * <pre>
     * Which type of UI mode the device is in (television, car, etc.).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.UiModeType ui_mode_type = 16;</code>
     */
    private void clearUiModeType() {
      
      uiModeType_ = 0;
    }

    public static final int UI_MODE_NIGHT_FIELD_NUMBER = 17;
    private int uiModeNight_;
    /**
     * <pre>
     * Whether the device is in night mode.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.UiModeNight ui_mode_night = 17;</code>
     */
    public int getUiModeNightValue() {
      return uiModeNight_;
    }
    /**
     * <pre>
     * Whether the device is in night mode.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.UiModeNight ui_mode_night = 17;</code>
     */
    public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeNight getUiModeNight() {
      com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeNight result = com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeNight.forNumber(uiModeNight_);
      return result == null ? com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeNight.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Whether the device is in night mode.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.UiModeNight ui_mode_night = 17;</code>
     */
    private void setUiModeNightValue(int value) {
        uiModeNight_ = value;
    }
    /**
     * <pre>
     * Whether the device is in night mode.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.UiModeNight ui_mode_night = 17;</code>
     */
    private void setUiModeNight(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeNight value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      uiModeNight_ = value.getNumber();
    }
    /**
     * <pre>
     * Whether the device is in night mode.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.UiModeNight ui_mode_night = 17;</code>
     */
    private void clearUiModeNight() {
      
      uiModeNight_ = 0;
    }

    public static final int DENSITY_FIELD_NUMBER = 18;
    private int density_;
    /**
     * <pre>
     * The device's screen density in dots-per-inch (dpi).
     * </pre>
     *
     * <code>uint32 density = 18;</code>
     */
    public int getDensity() {
      return density_;
    }
    /**
     * <pre>
     * The device's screen density in dots-per-inch (dpi).
     * </pre>
     *
     * <code>uint32 density = 18;</code>
     */
    private void setDensity(int value) {
      
      density_ = value;
    }
    /**
     * <pre>
     * The device's screen density in dots-per-inch (dpi).
     * </pre>
     *
     * <code>uint32 density = 18;</code>
     */
    private void clearDensity() {
      
      density_ = 0;
    }

    public static final int TOUCHSCREEN_FIELD_NUMBER = 19;
    private int touchscreen_;
    /**
     * <pre>
     * Whether a touchscreen exists, supports a stylus, or finger.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Touchscreen touchscreen = 19;</code>
     */
    public int getTouchscreenValue() {
      return touchscreen_;
    }
    /**
     * <pre>
     * Whether a touchscreen exists, supports a stylus, or finger.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Touchscreen touchscreen = 19;</code>
     */
    public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Touchscreen getTouchscreen() {
      com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Touchscreen result = com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Touchscreen.forNumber(touchscreen_);
      return result == null ? com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Touchscreen.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Whether a touchscreen exists, supports a stylus, or finger.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Touchscreen touchscreen = 19;</code>
     */
    private void setTouchscreenValue(int value) {
        touchscreen_ = value;
    }
    /**
     * <pre>
     * Whether a touchscreen exists, supports a stylus, or finger.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Touchscreen touchscreen = 19;</code>
     */
    private void setTouchscreen(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Touchscreen value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      touchscreen_ = value.getNumber();
    }
    /**
     * <pre>
     * Whether a touchscreen exists, supports a stylus, or finger.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Touchscreen touchscreen = 19;</code>
     */
    private void clearTouchscreen() {
      
      touchscreen_ = 0;
    }

    public static final int KEYS_HIDDEN_FIELD_NUMBER = 20;
    private int keysHidden_;
    /**
     * <pre>
     * Whether the keyboard hardware keys are currently hidden, exposed, or
     * if the keyboard is a software keyboard.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.KeysHidden keys_hidden = 20;</code>
     */
    public int getKeysHiddenValue() {
      return keysHidden_;
    }
    /**
     * <pre>
     * Whether the keyboard hardware keys are currently hidden, exposed, or
     * if the keyboard is a software keyboard.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.KeysHidden keys_hidden = 20;</code>
     */
    public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.KeysHidden getKeysHidden() {
      com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.KeysHidden result = com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.KeysHidden.forNumber(keysHidden_);
      return result == null ? com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.KeysHidden.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Whether the keyboard hardware keys are currently hidden, exposed, or
     * if the keyboard is a software keyboard.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.KeysHidden keys_hidden = 20;</code>
     */
    private void setKeysHiddenValue(int value) {
        keysHidden_ = value;
    }
    /**
     * <pre>
     * Whether the keyboard hardware keys are currently hidden, exposed, or
     * if the keyboard is a software keyboard.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.KeysHidden keys_hidden = 20;</code>
     */
    private void setKeysHidden(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.KeysHidden value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      keysHidden_ = value.getNumber();
    }
    /**
     * <pre>
     * Whether the keyboard hardware keys are currently hidden, exposed, or
     * if the keyboard is a software keyboard.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.KeysHidden keys_hidden = 20;</code>
     */
    private void clearKeysHidden() {
      
      keysHidden_ = 0;
    }

    public static final int KEYBOARD_FIELD_NUMBER = 21;
    private int keyboard_;
    /**
     * <pre>
     * The type of keyboard present (none, QWERTY, 12-key).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Keyboard keyboard = 21;</code>
     */
    public int getKeyboardValue() {
      return keyboard_;
    }
    /**
     * <pre>
     * The type of keyboard present (none, QWERTY, 12-key).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Keyboard keyboard = 21;</code>
     */
    public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Keyboard getKeyboard() {
      com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Keyboard result = com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Keyboard.forNumber(keyboard_);
      return result == null ? com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Keyboard.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The type of keyboard present (none, QWERTY, 12-key).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Keyboard keyboard = 21;</code>
     */
    private void setKeyboardValue(int value) {
        keyboard_ = value;
    }
    /**
     * <pre>
     * The type of keyboard present (none, QWERTY, 12-key).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Keyboard keyboard = 21;</code>
     */
    private void setKeyboard(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Keyboard value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      keyboard_ = value.getNumber();
    }
    /**
     * <pre>
     * The type of keyboard present (none, QWERTY, 12-key).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Keyboard keyboard = 21;</code>
     */
    private void clearKeyboard() {
      
      keyboard_ = 0;
    }

    public static final int NAV_HIDDEN_FIELD_NUMBER = 22;
    private int navHidden_;
    /**
     * <pre>
     * Whether the navigation is exposed or hidden.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.NavHidden nav_hidden = 22;</code>
     */
    public int getNavHiddenValue() {
      return navHidden_;
    }
    /**
     * <pre>
     * Whether the navigation is exposed or hidden.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.NavHidden nav_hidden = 22;</code>
     */
    public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.NavHidden getNavHidden() {
      com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.NavHidden result = com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.NavHidden.forNumber(navHidden_);
      return result == null ? com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.NavHidden.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Whether the navigation is exposed or hidden.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.NavHidden nav_hidden = 22;</code>
     */
    private void setNavHiddenValue(int value) {
        navHidden_ = value;
    }
    /**
     * <pre>
     * Whether the navigation is exposed or hidden.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.NavHidden nav_hidden = 22;</code>
     */
    private void setNavHidden(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.NavHidden value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      navHidden_ = value.getNumber();
    }
    /**
     * <pre>
     * Whether the navigation is exposed or hidden.
     * </pre>
     *
     * <code>.aapt.pb.Configuration.NavHidden nav_hidden = 22;</code>
     */
    private void clearNavHidden() {
      
      navHidden_ = 0;
    }

    public static final int NAVIGATION_FIELD_NUMBER = 23;
    private int navigation_;
    /**
     * <pre>
     * The type of navigation present on the device
     * (trackball, wheel, dpad, etc.).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Navigation navigation = 23;</code>
     */
    public int getNavigationValue() {
      return navigation_;
    }
    /**
     * <pre>
     * The type of navigation present on the device
     * (trackball, wheel, dpad, etc.).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Navigation navigation = 23;</code>
     */
    public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Navigation getNavigation() {
      com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Navigation result = com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Navigation.forNumber(navigation_);
      return result == null ? com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Navigation.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The type of navigation present on the device
     * (trackball, wheel, dpad, etc.).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Navigation navigation = 23;</code>
     */
    private void setNavigationValue(int value) {
        navigation_ = value;
    }
    /**
     * <pre>
     * The type of navigation present on the device
     * (trackball, wheel, dpad, etc.).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Navigation navigation = 23;</code>
     */
    private void setNavigation(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Navigation value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      navigation_ = value.getNumber();
    }
    /**
     * <pre>
     * The type of navigation present on the device
     * (trackball, wheel, dpad, etc.).
     * </pre>
     *
     * <code>.aapt.pb.Configuration.Navigation navigation = 23;</code>
     */
    private void clearNavigation() {
      
      navigation_ = 0;
    }

    public static final int SDK_VERSION_FIELD_NUMBER = 24;
    private int sdkVersion_;
    /**
     * <pre>
     * The minimum SDK version of the device.
     * </pre>
     *
     * <code>uint32 sdk_version = 24;</code>
     */
    public int getSdkVersion() {
      return sdkVersion_;
    }
    /**
     * <pre>
     * The minimum SDK version of the device.
     * </pre>
     *
     * <code>uint32 sdk_version = 24;</code>
     */
    private void setSdkVersion(int value) {
      
      sdkVersion_ = value;
    }
    /**
     * <pre>
     * The minimum SDK version of the device.
     * </pre>
     *
     * <code>uint32 sdk_version = 24;</code>
     */
    private void clearSdkVersion() {
      
      sdkVersion_ = 0;
    }

    public static final int PRODUCT_FIELD_NUMBER = 25;
    private java.lang.String product_;
    /**
     * <code>string product = 25;</code>
     */
    public java.lang.String getProduct() {
      return product_;
    }
    /**
     * <code>string product = 25;</code>
     */
    public com.google.protobuf.ByteString
        getProductBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(product_);
    }
    /**
     * <code>string product = 25;</code>
     */
    private void setProduct(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      product_ = value;
    }
    /**
     * <code>string product = 25;</code>
     */
    private void clearProduct() {
      
      product_ = getDefaultInstance().getProduct();
    }
    /**
     * <code>string product = 25;</code>
     */
    private void setProductBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      product_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (mcc_ != 0) {
        output.writeUInt32(1, mcc_);
      }
      if (mnc_ != 0) {
        output.writeUInt32(2, mnc_);
      }
      if (!locale_.isEmpty()) {
        output.writeString(3, getLocale());
      }
      if (layoutDirection_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.LayoutDirection.LAYOUT_DIRECTION_UNSET.getNumber()) {
        output.writeEnum(4, layoutDirection_);
      }
      if (screenWidth_ != 0) {
        output.writeUInt32(5, screenWidth_);
      }
      if (screenHeight_ != 0) {
        output.writeUInt32(6, screenHeight_);
      }
      if (screenWidthDp_ != 0) {
        output.writeUInt32(7, screenWidthDp_);
      }
      if (screenHeightDp_ != 0) {
        output.writeUInt32(8, screenHeightDp_);
      }
      if (smallestScreenWidthDp_ != 0) {
        output.writeUInt32(9, smallestScreenWidthDp_);
      }
      if (screenLayoutSize_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutSize.SCREEN_LAYOUT_SIZE_UNSET.getNumber()) {
        output.writeEnum(10, screenLayoutSize_);
      }
      if (screenLayoutLong_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutLong.SCREEN_LAYOUT_LONG_UNSET.getNumber()) {
        output.writeEnum(11, screenLayoutLong_);
      }
      if (screenRound_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenRound.SCREEN_ROUND_UNSET.getNumber()) {
        output.writeEnum(12, screenRound_);
      }
      if (wideColorGamut_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.WideColorGamut.WIDE_COLOR_GAMUT_UNSET.getNumber()) {
        output.writeEnum(13, wideColorGamut_);
      }
      if (hdr_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Hdr.HDR_UNSET.getNumber()) {
        output.writeEnum(14, hdr_);
      }
      if (orientation_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Orientation.ORIENTATION_UNSET.getNumber()) {
        output.writeEnum(15, orientation_);
      }
      if (uiModeType_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeType.UI_MODE_TYPE_UNSET.getNumber()) {
        output.writeEnum(16, uiModeType_);
      }
      if (uiModeNight_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeNight.UI_MODE_NIGHT_UNSET.getNumber()) {
        output.writeEnum(17, uiModeNight_);
      }
      if (density_ != 0) {
        output.writeUInt32(18, density_);
      }
      if (touchscreen_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Touchscreen.TOUCHSCREEN_UNSET.getNumber()) {
        output.writeEnum(19, touchscreen_);
      }
      if (keysHidden_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.KeysHidden.KEYS_HIDDEN_UNSET.getNumber()) {
        output.writeEnum(20, keysHidden_);
      }
      if (keyboard_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Keyboard.KEYBOARD_UNSET.getNumber()) {
        output.writeEnum(21, keyboard_);
      }
      if (navHidden_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.NavHidden.NAV_HIDDEN_UNSET.getNumber()) {
        output.writeEnum(22, navHidden_);
      }
      if (navigation_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Navigation.NAVIGATION_UNSET.getNumber()) {
        output.writeEnum(23, navigation_);
      }
      if (sdkVersion_ != 0) {
        output.writeUInt32(24, sdkVersion_);
      }
      if (!product_.isEmpty()) {
        output.writeString(25, getProduct());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (mcc_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, mcc_);
      }
      if (mnc_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, mnc_);
      }
      if (!locale_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getLocale());
      }
      if (layoutDirection_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.LayoutDirection.LAYOUT_DIRECTION_UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, layoutDirection_);
      }
      if (screenWidth_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, screenWidth_);
      }
      if (screenHeight_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, screenHeight_);
      }
      if (screenWidthDp_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, screenWidthDp_);
      }
      if (screenHeightDp_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, screenHeightDp_);
      }
      if (smallestScreenWidthDp_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, smallestScreenWidthDp_);
      }
      if (screenLayoutSize_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutSize.SCREEN_LAYOUT_SIZE_UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(10, screenLayoutSize_);
      }
      if (screenLayoutLong_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutLong.SCREEN_LAYOUT_LONG_UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, screenLayoutLong_);
      }
      if (screenRound_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenRound.SCREEN_ROUND_UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12, screenRound_);
      }
      if (wideColorGamut_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.WideColorGamut.WIDE_COLOR_GAMUT_UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(13, wideColorGamut_);
      }
      if (hdr_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Hdr.HDR_UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(14, hdr_);
      }
      if (orientation_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Orientation.ORIENTATION_UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(15, orientation_);
      }
      if (uiModeType_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeType.UI_MODE_TYPE_UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(16, uiModeType_);
      }
      if (uiModeNight_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeNight.UI_MODE_NIGHT_UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(17, uiModeNight_);
      }
      if (density_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(18, density_);
      }
      if (touchscreen_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Touchscreen.TOUCHSCREEN_UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(19, touchscreen_);
      }
      if (keysHidden_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.KeysHidden.KEYS_HIDDEN_UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(20, keysHidden_);
      }
      if (keyboard_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Keyboard.KEYBOARD_UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(21, keyboard_);
      }
      if (navHidden_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.NavHidden.NAV_HIDDEN_UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(22, navHidden_);
      }
      if (navigation_ != com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Navigation.NAVIGATION_UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(23, navigation_);
      }
      if (sdkVersion_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(24, sdkVersion_);
      }
      if (!product_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(25, getProduct());
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A description of the requirements a device must have in order for a
     * resource to be matched and selected.
     * </pre>
     *
     * Protobuf type {@code aapt.pb.Configuration}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration, Builder> implements
        // @@protoc_insertion_point(builder_implements:aapt.pb.Configuration)
        com.didiglobal.booster.aapt2.ConfigurationOuterClass.ConfigurationOrBuilder {
      // Construct using com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Mobile country code.
       * </pre>
       *
       * <code>uint32 mcc = 1;</code>
       */
      public int getMcc() {
        return instance.getMcc();
      }
      /**
       * <pre>
       * Mobile country code.
       * </pre>
       *
       * <code>uint32 mcc = 1;</code>
       */
      public Builder setMcc(int value) {
        copyOnWrite();
        instance.setMcc(value);
        return this;
      }
      /**
       * <pre>
       * Mobile country code.
       * </pre>
       *
       * <code>uint32 mcc = 1;</code>
       */
      public Builder clearMcc() {
        copyOnWrite();
        instance.clearMcc();
        return this;
      }

      /**
       * <pre>
       * Mobile network code.
       * </pre>
       *
       * <code>uint32 mnc = 2;</code>
       */
      public int getMnc() {
        return instance.getMnc();
      }
      /**
       * <pre>
       * Mobile network code.
       * </pre>
       *
       * <code>uint32 mnc = 2;</code>
       */
      public Builder setMnc(int value) {
        copyOnWrite();
        instance.setMnc(value);
        return this;
      }
      /**
       * <pre>
       * Mobile network code.
       * </pre>
       *
       * <code>uint32 mnc = 2;</code>
       */
      public Builder clearMnc() {
        copyOnWrite();
        instance.clearMnc();
        return this;
      }

      /**
       * <pre>
       * BCP-47 locale tag.
       * </pre>
       *
       * <code>string locale = 3;</code>
       */
      public java.lang.String getLocale() {
        return instance.getLocale();
      }
      /**
       * <pre>
       * BCP-47 locale tag.
       * </pre>
       *
       * <code>string locale = 3;</code>
       */
      public com.google.protobuf.ByteString
          getLocaleBytes() {
        return instance.getLocaleBytes();
      }
      /**
       * <pre>
       * BCP-47 locale tag.
       * </pre>
       *
       * <code>string locale = 3;</code>
       */
      public Builder setLocale(
          java.lang.String value) {
        copyOnWrite();
        instance.setLocale(value);
        return this;
      }
      /**
       * <pre>
       * BCP-47 locale tag.
       * </pre>
       *
       * <code>string locale = 3;</code>
       */
      public Builder clearLocale() {
        copyOnWrite();
        instance.clearLocale();
        return this;
      }
      /**
       * <pre>
       * BCP-47 locale tag.
       * </pre>
       *
       * <code>string locale = 3;</code>
       */
      public Builder setLocaleBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setLocaleBytes(value);
        return this;
      }

      /**
       * <pre>
       * Left-to-right, right-to-left...
       * </pre>
       *
       * <code>.aapt.pb.Configuration.LayoutDirection layout_direction = 4;</code>
       */
      public int getLayoutDirectionValue() {
        return instance.getLayoutDirectionValue();
      }
      /**
       * <pre>
       * Left-to-right, right-to-left...
       * </pre>
       *
       * <code>.aapt.pb.Configuration.LayoutDirection layout_direction = 4;</code>
       */
      public Builder setLayoutDirectionValue(int value) {
        copyOnWrite();
        instance.setLayoutDirectionValue(value);
        return this;
      }
      /**
       * <pre>
       * Left-to-right, right-to-left...
       * </pre>
       *
       * <code>.aapt.pb.Configuration.LayoutDirection layout_direction = 4;</code>
       */
      public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.LayoutDirection getLayoutDirection() {
        return instance.getLayoutDirection();
      }
      /**
       * <pre>
       * Left-to-right, right-to-left...
       * </pre>
       *
       * <code>.aapt.pb.Configuration.LayoutDirection layout_direction = 4;</code>
       */
      public Builder setLayoutDirection(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.LayoutDirection value) {
        copyOnWrite();
        instance.setLayoutDirection(value);
        return this;
      }
      /**
       * <pre>
       * Left-to-right, right-to-left...
       * </pre>
       *
       * <code>.aapt.pb.Configuration.LayoutDirection layout_direction = 4;</code>
       */
      public Builder clearLayoutDirection() {
        copyOnWrite();
        instance.clearLayoutDirection();
        return this;
      }

      /**
       * <pre>
       * Screen width in pixels. Prefer screen_width_dp.
       * </pre>
       *
       * <code>uint32 screen_width = 5;</code>
       */
      public int getScreenWidth() {
        return instance.getScreenWidth();
      }
      /**
       * <pre>
       * Screen width in pixels. Prefer screen_width_dp.
       * </pre>
       *
       * <code>uint32 screen_width = 5;</code>
       */
      public Builder setScreenWidth(int value) {
        copyOnWrite();
        instance.setScreenWidth(value);
        return this;
      }
      /**
       * <pre>
       * Screen width in pixels. Prefer screen_width_dp.
       * </pre>
       *
       * <code>uint32 screen_width = 5;</code>
       */
      public Builder clearScreenWidth() {
        copyOnWrite();
        instance.clearScreenWidth();
        return this;
      }

      /**
       * <pre>
       * Screen height in pixels. Prefer screen_height_dp.
       * </pre>
       *
       * <code>uint32 screen_height = 6;</code>
       */
      public int getScreenHeight() {
        return instance.getScreenHeight();
      }
      /**
       * <pre>
       * Screen height in pixels. Prefer screen_height_dp.
       * </pre>
       *
       * <code>uint32 screen_height = 6;</code>
       */
      public Builder setScreenHeight(int value) {
        copyOnWrite();
        instance.setScreenHeight(value);
        return this;
      }
      /**
       * <pre>
       * Screen height in pixels. Prefer screen_height_dp.
       * </pre>
       *
       * <code>uint32 screen_height = 6;</code>
       */
      public Builder clearScreenHeight() {
        copyOnWrite();
        instance.clearScreenHeight();
        return this;
      }

      /**
       * <pre>
       * Screen width in density independent pixels (dp).
       * </pre>
       *
       * <code>uint32 screen_width_dp = 7;</code>
       */
      public int getScreenWidthDp() {
        return instance.getScreenWidthDp();
      }
      /**
       * <pre>
       * Screen width in density independent pixels (dp).
       * </pre>
       *
       * <code>uint32 screen_width_dp = 7;</code>
       */
      public Builder setScreenWidthDp(int value) {
        copyOnWrite();
        instance.setScreenWidthDp(value);
        return this;
      }
      /**
       * <pre>
       * Screen width in density independent pixels (dp).
       * </pre>
       *
       * <code>uint32 screen_width_dp = 7;</code>
       */
      public Builder clearScreenWidthDp() {
        copyOnWrite();
        instance.clearScreenWidthDp();
        return this;
      }

      /**
       * <pre>
       * Screen height in density independent pixels (dp).
       * </pre>
       *
       * <code>uint32 screen_height_dp = 8;</code>
       */
      public int getScreenHeightDp() {
        return instance.getScreenHeightDp();
      }
      /**
       * <pre>
       * Screen height in density independent pixels (dp).
       * </pre>
       *
       * <code>uint32 screen_height_dp = 8;</code>
       */
      public Builder setScreenHeightDp(int value) {
        copyOnWrite();
        instance.setScreenHeightDp(value);
        return this;
      }
      /**
       * <pre>
       * Screen height in density independent pixels (dp).
       * </pre>
       *
       * <code>uint32 screen_height_dp = 8;</code>
       */
      public Builder clearScreenHeightDp() {
        copyOnWrite();
        instance.clearScreenHeightDp();
        return this;
      }

      /**
       * <pre>
       * The smallest screen dimension, regardless of orientation, in dp.
       * </pre>
       *
       * <code>uint32 smallest_screen_width_dp = 9;</code>
       */
      public int getSmallestScreenWidthDp() {
        return instance.getSmallestScreenWidthDp();
      }
      /**
       * <pre>
       * The smallest screen dimension, regardless of orientation, in dp.
       * </pre>
       *
       * <code>uint32 smallest_screen_width_dp = 9;</code>
       */
      public Builder setSmallestScreenWidthDp(int value) {
        copyOnWrite();
        instance.setSmallestScreenWidthDp(value);
        return this;
      }
      /**
       * <pre>
       * The smallest screen dimension, regardless of orientation, in dp.
       * </pre>
       *
       * <code>uint32 smallest_screen_width_dp = 9;</code>
       */
      public Builder clearSmallestScreenWidthDp() {
        copyOnWrite();
        instance.clearSmallestScreenWidthDp();
        return this;
      }

      /**
       * <pre>
       * Whether the device screen is classified as small, normal, large, xlarge.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.ScreenLayoutSize screen_layout_size = 10;</code>
       */
      public int getScreenLayoutSizeValue() {
        return instance.getScreenLayoutSizeValue();
      }
      /**
       * <pre>
       * Whether the device screen is classified as small, normal, large, xlarge.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.ScreenLayoutSize screen_layout_size = 10;</code>
       */
      public Builder setScreenLayoutSizeValue(int value) {
        copyOnWrite();
        instance.setScreenLayoutSizeValue(value);
        return this;
      }
      /**
       * <pre>
       * Whether the device screen is classified as small, normal, large, xlarge.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.ScreenLayoutSize screen_layout_size = 10;</code>
       */
      public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutSize getScreenLayoutSize() {
        return instance.getScreenLayoutSize();
      }
      /**
       * <pre>
       * Whether the device screen is classified as small, normal, large, xlarge.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.ScreenLayoutSize screen_layout_size = 10;</code>
       */
      public Builder setScreenLayoutSize(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutSize value) {
        copyOnWrite();
        instance.setScreenLayoutSize(value);
        return this;
      }
      /**
       * <pre>
       * Whether the device screen is classified as small, normal, large, xlarge.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.ScreenLayoutSize screen_layout_size = 10;</code>
       */
      public Builder clearScreenLayoutSize() {
        copyOnWrite();
        instance.clearScreenLayoutSize();
        return this;
      }

      /**
       * <pre>
       * Whether the device screen is long.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.ScreenLayoutLong screen_layout_long = 11;</code>
       */
      public int getScreenLayoutLongValue() {
        return instance.getScreenLayoutLongValue();
      }
      /**
       * <pre>
       * Whether the device screen is long.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.ScreenLayoutLong screen_layout_long = 11;</code>
       */
      public Builder setScreenLayoutLongValue(int value) {
        copyOnWrite();
        instance.setScreenLayoutLongValue(value);
        return this;
      }
      /**
       * <pre>
       * Whether the device screen is long.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.ScreenLayoutLong screen_layout_long = 11;</code>
       */
      public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutLong getScreenLayoutLong() {
        return instance.getScreenLayoutLong();
      }
      /**
       * <pre>
       * Whether the device screen is long.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.ScreenLayoutLong screen_layout_long = 11;</code>
       */
      public Builder setScreenLayoutLong(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenLayoutLong value) {
        copyOnWrite();
        instance.setScreenLayoutLong(value);
        return this;
      }
      /**
       * <pre>
       * Whether the device screen is long.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.ScreenLayoutLong screen_layout_long = 11;</code>
       */
      public Builder clearScreenLayoutLong() {
        copyOnWrite();
        instance.clearScreenLayoutLong();
        return this;
      }

      /**
       * <pre>
       * Whether the screen is round (Android Wear).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.ScreenRound screen_round = 12;</code>
       */
      public int getScreenRoundValue() {
        return instance.getScreenRoundValue();
      }
      /**
       * <pre>
       * Whether the screen is round (Android Wear).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.ScreenRound screen_round = 12;</code>
       */
      public Builder setScreenRoundValue(int value) {
        copyOnWrite();
        instance.setScreenRoundValue(value);
        return this;
      }
      /**
       * <pre>
       * Whether the screen is round (Android Wear).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.ScreenRound screen_round = 12;</code>
       */
      public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenRound getScreenRound() {
        return instance.getScreenRound();
      }
      /**
       * <pre>
       * Whether the screen is round (Android Wear).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.ScreenRound screen_round = 12;</code>
       */
      public Builder setScreenRound(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.ScreenRound value) {
        copyOnWrite();
        instance.setScreenRound(value);
        return this;
      }
      /**
       * <pre>
       * Whether the screen is round (Android Wear).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.ScreenRound screen_round = 12;</code>
       */
      public Builder clearScreenRound() {
        copyOnWrite();
        instance.clearScreenRound();
        return this;
      }

      /**
       * <pre>
       * Whether the screen supports wide color gamut.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.WideColorGamut wide_color_gamut = 13;</code>
       */
      public int getWideColorGamutValue() {
        return instance.getWideColorGamutValue();
      }
      /**
       * <pre>
       * Whether the screen supports wide color gamut.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.WideColorGamut wide_color_gamut = 13;</code>
       */
      public Builder setWideColorGamutValue(int value) {
        copyOnWrite();
        instance.setWideColorGamutValue(value);
        return this;
      }
      /**
       * <pre>
       * Whether the screen supports wide color gamut.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.WideColorGamut wide_color_gamut = 13;</code>
       */
      public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.WideColorGamut getWideColorGamut() {
        return instance.getWideColorGamut();
      }
      /**
       * <pre>
       * Whether the screen supports wide color gamut.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.WideColorGamut wide_color_gamut = 13;</code>
       */
      public Builder setWideColorGamut(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.WideColorGamut value) {
        copyOnWrite();
        instance.setWideColorGamut(value);
        return this;
      }
      /**
       * <pre>
       * Whether the screen supports wide color gamut.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.WideColorGamut wide_color_gamut = 13;</code>
       */
      public Builder clearWideColorGamut() {
        copyOnWrite();
        instance.clearWideColorGamut();
        return this;
      }

      /**
       * <pre>
       * Whether the screen has high dynamic range.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Hdr hdr = 14;</code>
       */
      public int getHdrValue() {
        return instance.getHdrValue();
      }
      /**
       * <pre>
       * Whether the screen has high dynamic range.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Hdr hdr = 14;</code>
       */
      public Builder setHdrValue(int value) {
        copyOnWrite();
        instance.setHdrValue(value);
        return this;
      }
      /**
       * <pre>
       * Whether the screen has high dynamic range.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Hdr hdr = 14;</code>
       */
      public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Hdr getHdr() {
        return instance.getHdr();
      }
      /**
       * <pre>
       * Whether the screen has high dynamic range.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Hdr hdr = 14;</code>
       */
      public Builder setHdr(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Hdr value) {
        copyOnWrite();
        instance.setHdr(value);
        return this;
      }
      /**
       * <pre>
       * Whether the screen has high dynamic range.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Hdr hdr = 14;</code>
       */
      public Builder clearHdr() {
        copyOnWrite();
        instance.clearHdr();
        return this;
      }

      /**
       * <pre>
       * Which orientation the device is in (portrait, landscape).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Orientation orientation = 15;</code>
       */
      public int getOrientationValue() {
        return instance.getOrientationValue();
      }
      /**
       * <pre>
       * Which orientation the device is in (portrait, landscape).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Orientation orientation = 15;</code>
       */
      public Builder setOrientationValue(int value) {
        copyOnWrite();
        instance.setOrientationValue(value);
        return this;
      }
      /**
       * <pre>
       * Which orientation the device is in (portrait, landscape).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Orientation orientation = 15;</code>
       */
      public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Orientation getOrientation() {
        return instance.getOrientation();
      }
      /**
       * <pre>
       * Which orientation the device is in (portrait, landscape).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Orientation orientation = 15;</code>
       */
      public Builder setOrientation(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Orientation value) {
        copyOnWrite();
        instance.setOrientation(value);
        return this;
      }
      /**
       * <pre>
       * Which orientation the device is in (portrait, landscape).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Orientation orientation = 15;</code>
       */
      public Builder clearOrientation() {
        copyOnWrite();
        instance.clearOrientation();
        return this;
      }

      /**
       * <pre>
       * Which type of UI mode the device is in (television, car, etc.).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.UiModeType ui_mode_type = 16;</code>
       */
      public int getUiModeTypeValue() {
        return instance.getUiModeTypeValue();
      }
      /**
       * <pre>
       * Which type of UI mode the device is in (television, car, etc.).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.UiModeType ui_mode_type = 16;</code>
       */
      public Builder setUiModeTypeValue(int value) {
        copyOnWrite();
        instance.setUiModeTypeValue(value);
        return this;
      }
      /**
       * <pre>
       * Which type of UI mode the device is in (television, car, etc.).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.UiModeType ui_mode_type = 16;</code>
       */
      public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeType getUiModeType() {
        return instance.getUiModeType();
      }
      /**
       * <pre>
       * Which type of UI mode the device is in (television, car, etc.).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.UiModeType ui_mode_type = 16;</code>
       */
      public Builder setUiModeType(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeType value) {
        copyOnWrite();
        instance.setUiModeType(value);
        return this;
      }
      /**
       * <pre>
       * Which type of UI mode the device is in (television, car, etc.).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.UiModeType ui_mode_type = 16;</code>
       */
      public Builder clearUiModeType() {
        copyOnWrite();
        instance.clearUiModeType();
        return this;
      }

      /**
       * <pre>
       * Whether the device is in night mode.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.UiModeNight ui_mode_night = 17;</code>
       */
      public int getUiModeNightValue() {
        return instance.getUiModeNightValue();
      }
      /**
       * <pre>
       * Whether the device is in night mode.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.UiModeNight ui_mode_night = 17;</code>
       */
      public Builder setUiModeNightValue(int value) {
        copyOnWrite();
        instance.setUiModeNightValue(value);
        return this;
      }
      /**
       * <pre>
       * Whether the device is in night mode.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.UiModeNight ui_mode_night = 17;</code>
       */
      public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeNight getUiModeNight() {
        return instance.getUiModeNight();
      }
      /**
       * <pre>
       * Whether the device is in night mode.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.UiModeNight ui_mode_night = 17;</code>
       */
      public Builder setUiModeNight(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.UiModeNight value) {
        copyOnWrite();
        instance.setUiModeNight(value);
        return this;
      }
      /**
       * <pre>
       * Whether the device is in night mode.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.UiModeNight ui_mode_night = 17;</code>
       */
      public Builder clearUiModeNight() {
        copyOnWrite();
        instance.clearUiModeNight();
        return this;
      }

      /**
       * <pre>
       * The device's screen density in dots-per-inch (dpi).
       * </pre>
       *
       * <code>uint32 density = 18;</code>
       */
      public int getDensity() {
        return instance.getDensity();
      }
      /**
       * <pre>
       * The device's screen density in dots-per-inch (dpi).
       * </pre>
       *
       * <code>uint32 density = 18;</code>
       */
      public Builder setDensity(int value) {
        copyOnWrite();
        instance.setDensity(value);
        return this;
      }
      /**
       * <pre>
       * The device's screen density in dots-per-inch (dpi).
       * </pre>
       *
       * <code>uint32 density = 18;</code>
       */
      public Builder clearDensity() {
        copyOnWrite();
        instance.clearDensity();
        return this;
      }

      /**
       * <pre>
       * Whether a touchscreen exists, supports a stylus, or finger.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Touchscreen touchscreen = 19;</code>
       */
      public int getTouchscreenValue() {
        return instance.getTouchscreenValue();
      }
      /**
       * <pre>
       * Whether a touchscreen exists, supports a stylus, or finger.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Touchscreen touchscreen = 19;</code>
       */
      public Builder setTouchscreenValue(int value) {
        copyOnWrite();
        instance.setTouchscreenValue(value);
        return this;
      }
      /**
       * <pre>
       * Whether a touchscreen exists, supports a stylus, or finger.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Touchscreen touchscreen = 19;</code>
       */
      public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Touchscreen getTouchscreen() {
        return instance.getTouchscreen();
      }
      /**
       * <pre>
       * Whether a touchscreen exists, supports a stylus, or finger.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Touchscreen touchscreen = 19;</code>
       */
      public Builder setTouchscreen(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Touchscreen value) {
        copyOnWrite();
        instance.setTouchscreen(value);
        return this;
      }
      /**
       * <pre>
       * Whether a touchscreen exists, supports a stylus, or finger.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Touchscreen touchscreen = 19;</code>
       */
      public Builder clearTouchscreen() {
        copyOnWrite();
        instance.clearTouchscreen();
        return this;
      }

      /**
       * <pre>
       * Whether the keyboard hardware keys are currently hidden, exposed, or
       * if the keyboard is a software keyboard.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.KeysHidden keys_hidden = 20;</code>
       */
      public int getKeysHiddenValue() {
        return instance.getKeysHiddenValue();
      }
      /**
       * <pre>
       * Whether the keyboard hardware keys are currently hidden, exposed, or
       * if the keyboard is a software keyboard.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.KeysHidden keys_hidden = 20;</code>
       */
      public Builder setKeysHiddenValue(int value) {
        copyOnWrite();
        instance.setKeysHiddenValue(value);
        return this;
      }
      /**
       * <pre>
       * Whether the keyboard hardware keys are currently hidden, exposed, or
       * if the keyboard is a software keyboard.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.KeysHidden keys_hidden = 20;</code>
       */
      public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.KeysHidden getKeysHidden() {
        return instance.getKeysHidden();
      }
      /**
       * <pre>
       * Whether the keyboard hardware keys are currently hidden, exposed, or
       * if the keyboard is a software keyboard.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.KeysHidden keys_hidden = 20;</code>
       */
      public Builder setKeysHidden(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.KeysHidden value) {
        copyOnWrite();
        instance.setKeysHidden(value);
        return this;
      }
      /**
       * <pre>
       * Whether the keyboard hardware keys are currently hidden, exposed, or
       * if the keyboard is a software keyboard.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.KeysHidden keys_hidden = 20;</code>
       */
      public Builder clearKeysHidden() {
        copyOnWrite();
        instance.clearKeysHidden();
        return this;
      }

      /**
       * <pre>
       * The type of keyboard present (none, QWERTY, 12-key).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Keyboard keyboard = 21;</code>
       */
      public int getKeyboardValue() {
        return instance.getKeyboardValue();
      }
      /**
       * <pre>
       * The type of keyboard present (none, QWERTY, 12-key).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Keyboard keyboard = 21;</code>
       */
      public Builder setKeyboardValue(int value) {
        copyOnWrite();
        instance.setKeyboardValue(value);
        return this;
      }
      /**
       * <pre>
       * The type of keyboard present (none, QWERTY, 12-key).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Keyboard keyboard = 21;</code>
       */
      public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Keyboard getKeyboard() {
        return instance.getKeyboard();
      }
      /**
       * <pre>
       * The type of keyboard present (none, QWERTY, 12-key).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Keyboard keyboard = 21;</code>
       */
      public Builder setKeyboard(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Keyboard value) {
        copyOnWrite();
        instance.setKeyboard(value);
        return this;
      }
      /**
       * <pre>
       * The type of keyboard present (none, QWERTY, 12-key).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Keyboard keyboard = 21;</code>
       */
      public Builder clearKeyboard() {
        copyOnWrite();
        instance.clearKeyboard();
        return this;
      }

      /**
       * <pre>
       * Whether the navigation is exposed or hidden.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.NavHidden nav_hidden = 22;</code>
       */
      public int getNavHiddenValue() {
        return instance.getNavHiddenValue();
      }
      /**
       * <pre>
       * Whether the navigation is exposed or hidden.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.NavHidden nav_hidden = 22;</code>
       */
      public Builder setNavHiddenValue(int value) {
        copyOnWrite();
        instance.setNavHiddenValue(value);
        return this;
      }
      /**
       * <pre>
       * Whether the navigation is exposed or hidden.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.NavHidden nav_hidden = 22;</code>
       */
      public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.NavHidden getNavHidden() {
        return instance.getNavHidden();
      }
      /**
       * <pre>
       * Whether the navigation is exposed or hidden.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.NavHidden nav_hidden = 22;</code>
       */
      public Builder setNavHidden(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.NavHidden value) {
        copyOnWrite();
        instance.setNavHidden(value);
        return this;
      }
      /**
       * <pre>
       * Whether the navigation is exposed or hidden.
       * </pre>
       *
       * <code>.aapt.pb.Configuration.NavHidden nav_hidden = 22;</code>
       */
      public Builder clearNavHidden() {
        copyOnWrite();
        instance.clearNavHidden();
        return this;
      }

      /**
       * <pre>
       * The type of navigation present on the device
       * (trackball, wheel, dpad, etc.).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Navigation navigation = 23;</code>
       */
      public int getNavigationValue() {
        return instance.getNavigationValue();
      }
      /**
       * <pre>
       * The type of navigation present on the device
       * (trackball, wheel, dpad, etc.).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Navigation navigation = 23;</code>
       */
      public Builder setNavigationValue(int value) {
        copyOnWrite();
        instance.setNavigationValue(value);
        return this;
      }
      /**
       * <pre>
       * The type of navigation present on the device
       * (trackball, wheel, dpad, etc.).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Navigation navigation = 23;</code>
       */
      public com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Navigation getNavigation() {
        return instance.getNavigation();
      }
      /**
       * <pre>
       * The type of navigation present on the device
       * (trackball, wheel, dpad, etc.).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Navigation navigation = 23;</code>
       */
      public Builder setNavigation(com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.Navigation value) {
        copyOnWrite();
        instance.setNavigation(value);
        return this;
      }
      /**
       * <pre>
       * The type of navigation present on the device
       * (trackball, wheel, dpad, etc.).
       * </pre>
       *
       * <code>.aapt.pb.Configuration.Navigation navigation = 23;</code>
       */
      public Builder clearNavigation() {
        copyOnWrite();
        instance.clearNavigation();
        return this;
      }

      /**
       * <pre>
       * The minimum SDK version of the device.
       * </pre>
       *
       * <code>uint32 sdk_version = 24;</code>
       */
      public int getSdkVersion() {
        return instance.getSdkVersion();
      }
      /**
       * <pre>
       * The minimum SDK version of the device.
       * </pre>
       *
       * <code>uint32 sdk_version = 24;</code>
       */
      public Builder setSdkVersion(int value) {
        copyOnWrite();
        instance.setSdkVersion(value);
        return this;
      }
      /**
       * <pre>
       * The minimum SDK version of the device.
       * </pre>
       *
       * <code>uint32 sdk_version = 24;</code>
       */
      public Builder clearSdkVersion() {
        copyOnWrite();
        instance.clearSdkVersion();
        return this;
      }

      /**
       * <code>string product = 25;</code>
       */
      public java.lang.String getProduct() {
        return instance.getProduct();
      }
      /**
       * <code>string product = 25;</code>
       */
      public com.google.protobuf.ByteString
          getProductBytes() {
        return instance.getProductBytes();
      }
      /**
       * <code>string product = 25;</code>
       */
      public Builder setProduct(
          java.lang.String value) {
        copyOnWrite();
        instance.setProduct(value);
        return this;
      }
      /**
       * <code>string product = 25;</code>
       */
      public Builder clearProduct() {
        copyOnWrite();
        instance.clearProduct();
        return this;
      }
      /**
       * <code>string product = 25;</code>
       */
      public Builder setProductBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setProductBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:aapt.pb.Configuration)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration other = (com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration) arg1;
          mcc_ = visitor.visitInt(mcc_ != 0, mcc_,
              other.mcc_ != 0, other.mcc_);
          mnc_ = visitor.visitInt(mnc_ != 0, mnc_,
              other.mnc_ != 0, other.mnc_);
          locale_ = visitor.visitString(!locale_.isEmpty(), locale_,
              !other.locale_.isEmpty(), other.locale_);
          layoutDirection_ = visitor.visitInt(layoutDirection_ != 0, layoutDirection_,    other.layoutDirection_ != 0, other.layoutDirection_);
          screenWidth_ = visitor.visitInt(screenWidth_ != 0, screenWidth_,
              other.screenWidth_ != 0, other.screenWidth_);
          screenHeight_ = visitor.visitInt(screenHeight_ != 0, screenHeight_,
              other.screenHeight_ != 0, other.screenHeight_);
          screenWidthDp_ = visitor.visitInt(screenWidthDp_ != 0, screenWidthDp_,
              other.screenWidthDp_ != 0, other.screenWidthDp_);
          screenHeightDp_ = visitor.visitInt(screenHeightDp_ != 0, screenHeightDp_,
              other.screenHeightDp_ != 0, other.screenHeightDp_);
          smallestScreenWidthDp_ = visitor.visitInt(smallestScreenWidthDp_ != 0, smallestScreenWidthDp_,
              other.smallestScreenWidthDp_ != 0, other.smallestScreenWidthDp_);
          screenLayoutSize_ = visitor.visitInt(screenLayoutSize_ != 0, screenLayoutSize_,    other.screenLayoutSize_ != 0, other.screenLayoutSize_);
          screenLayoutLong_ = visitor.visitInt(screenLayoutLong_ != 0, screenLayoutLong_,    other.screenLayoutLong_ != 0, other.screenLayoutLong_);
          screenRound_ = visitor.visitInt(screenRound_ != 0, screenRound_,    other.screenRound_ != 0, other.screenRound_);
          wideColorGamut_ = visitor.visitInt(wideColorGamut_ != 0, wideColorGamut_,    other.wideColorGamut_ != 0, other.wideColorGamut_);
          hdr_ = visitor.visitInt(hdr_ != 0, hdr_,    other.hdr_ != 0, other.hdr_);
          orientation_ = visitor.visitInt(orientation_ != 0, orientation_,    other.orientation_ != 0, other.orientation_);
          uiModeType_ = visitor.visitInt(uiModeType_ != 0, uiModeType_,    other.uiModeType_ != 0, other.uiModeType_);
          uiModeNight_ = visitor.visitInt(uiModeNight_ != 0, uiModeNight_,    other.uiModeNight_ != 0, other.uiModeNight_);
          density_ = visitor.visitInt(density_ != 0, density_,
              other.density_ != 0, other.density_);
          touchscreen_ = visitor.visitInt(touchscreen_ != 0, touchscreen_,    other.touchscreen_ != 0, other.touchscreen_);
          keysHidden_ = visitor.visitInt(keysHidden_ != 0, keysHidden_,    other.keysHidden_ != 0, other.keysHidden_);
          keyboard_ = visitor.visitInt(keyboard_ != 0, keyboard_,    other.keyboard_ != 0, other.keyboard_);
          navHidden_ = visitor.visitInt(navHidden_ != 0, navHidden_,    other.navHidden_ != 0, other.navHidden_);
          navigation_ = visitor.visitInt(navigation_ != 0, navigation_,    other.navigation_ != 0, other.navigation_);
          sdkVersion_ = visitor.visitInt(sdkVersion_ != 0, sdkVersion_,
              other.sdkVersion_ != 0, other.sdkVersion_);
          product_ = visitor.visitString(!product_.isEmpty(), product_,
              !other.product_.isEmpty(), other.product_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  mcc_ = input.readUInt32();
                  break;
                }
                case 16: {

                  mnc_ = input.readUInt32();
                  break;
                }
                case 26: {
                  java.lang.String s = input.readStringRequireUtf8();

                  locale_ = s;
                  break;
                }
                case 32: {
                  int rawValue = input.readEnum();

                  layoutDirection_ = rawValue;
                  break;
                }
                case 40: {

                  screenWidth_ = input.readUInt32();
                  break;
                }
                case 48: {

                  screenHeight_ = input.readUInt32();
                  break;
                }
                case 56: {

                  screenWidthDp_ = input.readUInt32();
                  break;
                }
                case 64: {

                  screenHeightDp_ = input.readUInt32();
                  break;
                }
                case 72: {

                  smallestScreenWidthDp_ = input.readUInt32();
                  break;
                }
                case 80: {
                  int rawValue = input.readEnum();

                  screenLayoutSize_ = rawValue;
                  break;
                }
                case 88: {
                  int rawValue = input.readEnum();

                  screenLayoutLong_ = rawValue;
                  break;
                }
                case 96: {
                  int rawValue = input.readEnum();

                  screenRound_ = rawValue;
                  break;
                }
                case 104: {
                  int rawValue = input.readEnum();

                  wideColorGamut_ = rawValue;
                  break;
                }
                case 112: {
                  int rawValue = input.readEnum();

                  hdr_ = rawValue;
                  break;
                }
                case 120: {
                  int rawValue = input.readEnum();

                  orientation_ = rawValue;
                  break;
                }
                case 128: {
                  int rawValue = input.readEnum();

                  uiModeType_ = rawValue;
                  break;
                }
                case 136: {
                  int rawValue = input.readEnum();

                  uiModeNight_ = rawValue;
                  break;
                }
                case 144: {

                  density_ = input.readUInt32();
                  break;
                }
                case 152: {
                  int rawValue = input.readEnum();

                  touchscreen_ = rawValue;
                  break;
                }
                case 160: {
                  int rawValue = input.readEnum();

                  keysHidden_ = rawValue;
                  break;
                }
                case 168: {
                  int rawValue = input.readEnum();

                  keyboard_ = rawValue;
                  break;
                }
                case 176: {
                  int rawValue = input.readEnum();

                  navHidden_ = rawValue;
                  break;
                }
                case 184: {
                  int rawValue = input.readEnum();

                  navigation_ = rawValue;
                  break;
                }
                case 192: {

                  sdkVersion_ = input.readUInt32();
                  break;
                }
                case 202: {
                  java.lang.String s = input.readStringRequireUtf8();

                  product_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:aapt.pb.Configuration)
    private static final com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Configuration();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.didiglobal.booster.aapt2.ConfigurationOuterClass.Configuration getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Configuration> PARSER;

    public static com.google.protobuf.Parser<Configuration> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
